{"version":3,"sources":["index.ts","script.ts"],"names":[],"mappings":"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","file":"script.d0c2d151.js","sourceRoot":"..","sourcesContent":["/*\n * @Author: Innei\n * @Date: 2020-08-13 21:31:23\n * @LastEditTime: 2020-08-14 13:31:47\n * @LastEditors: Innei\n * @FilePath: /url-animation/index.ts\n * @Coding with Love\n */\n\ninterface AnimationConfig {\n  duration?: number\n  shouldPushState?: boolean\n  backspacingEmoji?: string\n  buildingEmoji?: string\n}\nexport const EmojiRegExp = /<% emojiSequence %>|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F|\\p{Emoji_Modifier_Base}/gu\nexport const animateUriFactory = (\n  config: AnimationConfig = {\n    duration: 60,\n    shouldPushState: true,\n    backspacingEmoji: `🔨👴`,\n    buildingEmoji: `🍻`,\n  },\n) => {\n  if (!('replaceState' in history)) {\n    throw new Error('browser not support replaceState.')\n  }\n\n  let timer: number | undefined = undefined\n  let navigator = ''\n  const duration = config.duration || 100\n  const shouldPushState = config.shouldPushState || true\n  const backspacingEmoji = config.backspacingEmoji || `🔨👴`\n  const buildingEmoji = config.buildingEmoji || `🍻`\n\n  return {\n    /**\n     *\n     * @param {string} to\n     * @param {string | undefined} startWith\n     */\n    start(to: string, startWith?: string | undefined) {\n      if (typeof to !== 'string' || to.charAt(0) !== '/') {\n        throw new Error('to must start with `/`')\n      }\n\n      if (timer) {\n        timer = clearInterval(timer) as undefined\n      }\n      if (startWith && startWith.charAt(0) === '/') {\n        history.replaceState(null, '', startWith)\n      }\n      let once = false\n      const currentTitle = document.title\n\n      timer = setInterval(() => {\n        let beforeUri = decodeURI(location.pathname).replace(EmojiRegExp, '')\n\n        if (beforeUri === to) {\n          return this.stop()\n        }\n        const isBuilding = to.indexOf(beforeUri) > -1\n\n        // beforeUri = beforeUri.replace(\n        //   new RegExp(`${isBuilding ? buildingEmoji : backspacingEmoji}$`, 'gu'),\n        //   '',\n        // )\n\n        const stepUri = isBuilding\n          ? beforeUri.concat(to.charAt(beforeUri.length))\n          : beforeUri.slice(0, beforeUri.length - 1)\n        if (!once) {\n          navigator = to\n          if (shouldPushState) {\n            history.pushState(null, currentTitle, to)\n          }\n          once = true\n        }\n        history.replaceState(\n          null,\n          currentTitle,\n          `${stepUri}${!isBuilding ? backspacingEmoji : buildingEmoji}`,\n        )\n      }, duration)\n      return this\n      // history.replaceState(null, title ?? currentTitle, uri)\n    },\n    stop() {\n      timer = clearInterval(timer) as undefined\n      return history.replaceState(null, '', navigator)\n    },\n  }\n}\n\nexport const bindAllLink = (config?: AnimationConfig) => {\n  const instance = animateUriFactory(config)\n  const $$links = Array.from(document.querySelectorAll('a'))\n  for (const $link of $$links) {\n    const destination = $link.getAttribute('href')\n\n    if (\n      destination &&\n      destination.charAt(0) === '/' &&\n      destination.charAt(1) !== '/'\n    ) {\n      $link.addEventListener('click', (e) => {\n        e.preventDefault()\n        instance.start(destination)\n      })\n    }\n  }\n\n  return instance\n}\n","/*\n * @Author: Innei\n * @Date: 2020-08-13 19:55:12\n * @LastEditTime: 2020-08-14 13:55:21\n * @LastEditors: Innei\n * @FilePath: /url-animation/script.ts\n * @Coding with Love\n */\n// @ts-check\n// import { animateUriFactory } from './publish'\n\nimport { animateUriFactory, bindAllLink } from './publish'\n\nanimateUriFactory({ duration: 60, shouldPushState: false }).start(\n  '/hello-world',\n  '/',\n)\n\nconst instance = bindAllLink()\n\nconst $input = document.getElementById('destination') as HTMLInputElement\nconst $button = document.getElementById('button')\nconst handler = () => {\n  let value = $input.value\n  if (value.charAt(0) != '/') {\n    value = '/'.concat(value)\n  }\n  instance.start(value)\n}\n$button!.onclick = handler\n$button!.onkeydown = (e) => {\n  if (e.key === 'Enter') {\n    handler()\n  }\n}\n"]}