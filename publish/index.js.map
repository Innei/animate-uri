{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAqGa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,kBAAA,QAAA,iBAAA,EA7Fb,IAAM,EAA0B,oBAAX,OAOR,QAAA,YAAc,8rFACd,QAAA,kBAAoB,SAC/B,GAOI,QAPJ,IAAA,IAAA,EAAA,CACE,SAAU,GACV,iBAAiB,EACjB,iBAAkB,OAClB,cAAe,QAGb,EAAA,CAGA,KAAE,iBAAkB,SAChB,MAAA,IAAI,MAAM,qCAGd,IAAA,OAA4B,EAC5B,EAAY,GACV,EAAW,EAAO,UAAY,IAC9B,EAAkB,EAAO,kBAAmB,EAC5C,EAAmB,EAAO,kBAAoB,OAC9C,EAAgB,EAAO,eAAiB,KAEvC,MAAA,CAML,MAAA,SAAM,EAAY,GAAlB,IAAA,EAAA,KACS,OAAA,IAAI,QAAQ,SAAC,EAAS,GACT,iBAAP,GAAoC,MAAjB,EAAG,OAAO,IACtC,EAAO,IAAI,MAAM,2BAGf,IACF,EAAQ,cAAc,IAEpB,GAAqC,MAAxB,EAAU,OAAO,IAChC,QAAQ,aAAa,KAAM,GAAI,GAE7B,IAAA,GAAO,EACL,EAAe,SAAS,MAE9B,EAAQ,YAAY,WACd,IAAA,EAAY,UAAU,SAAS,UAAU,QAAQ,QAAA,YAAa,IAE9D,GAAA,IAAc,EAET,OADP,EAAQ,GACD,EAAK,OAER,IAAA,EAAa,EAAG,QAAQ,IAAc,EAOtC,EAAU,EACZ,EAAU,OAAO,EAAG,OAAO,EAAU,SACrC,EAAU,MAAM,EAAG,EAAU,OAAS,GACrC,IACH,EAAY,EACR,GACF,QAAQ,UAAU,KAAM,EAAc,GAExC,GAAO,GAET,QAAQ,aACN,KACA,EACA,GAAG,GAAW,EAAgC,EAAnB,KAE5B,MAGP,KAAA,WAES,OADP,EAAQ,cAAc,GACf,QAAQ,aAAa,KAAM,GAAI,IAExC,OAAA,WACE,EAAQ,cAAc,OAKf,QAAA,YAAc,SAAC,GACtB,IAAA,EAAA,CAKgB,IAFd,IAAA,EAAW,QAAA,kBAAkB,GAExB,EAAA,SAAA,GACH,IAAA,EAAc,EAAM,aAAa,QAGrC,GAC0B,MAA1B,EAAY,OAAO,IACO,MAA1B,EAAY,OAAO,IAEnB,EAAM,iBAAiB,QAAS,SAAC,GAC/B,EAAE,iBACF,MAAA,GAAA,EAAU,MAAM,MAVF,EAAA,EAAA,EADJ,MAAM,KAAK,SAAS,iBAAiB,MACjC,EAAA,EAAA,OAAA,IAAO,CAAhB,EAAK,EAAA,IAeT,OAAA","file":"index.js","sourceRoot":"..","sourcesContent":["/*\n * @Author: Innei\n * @Date: 2020-08-13 21:31:23\n * @LastEditTime: 2020-08-15 21:05:21\n * @LastEditors: Innei\n * @FilePath: /url-animation/index.ts\n * @Coding with Love\n */\nconst isSSR = typeof window === 'undefined'\ninterface AnimationConfig {\n  duration?: number\n  shouldPushState?: boolean\n  backspacingEmoji?: string\n  buildingEmoji?: string\n}\nexport const EmojiRegExp = /<% emojiSequence %>|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F|\\p{Emoji_Modifier_Base}/gu\nexport const animateUriFactory = (\n  config: AnimationConfig = {\n    duration: 60,\n    shouldPushState: true,\n    backspacingEmoji: `🔨👴`,\n    buildingEmoji: `🍻`,\n  },\n) => {\n  if (isSSR) {\n    return\n  }\n  if (!('replaceState' in history)) {\n    throw new Error('browser not support replaceState.')\n  }\n\n  let timer: number | undefined = undefined\n  let navigator = ''\n  const duration = config.duration || 100\n  const shouldPushState = config.shouldPushState || true\n  const backspacingEmoji = config.backspacingEmoji || `🔨👴`\n  const buildingEmoji = config.buildingEmoji || `🍻`\n\n  return {\n    /**\n     *\n     * @param {string} to\n     * @param {string | undefined} startWith\n     */\n    start(to: string, startWith?: string | undefined) {\n      return new Promise((resolve, reject) => {\n        if (typeof to !== 'string' || to.charAt(0) !== '/') {\n          reject(new Error('to must start with `/`'))\n        }\n\n        if (timer) {\n          timer = clearInterval(timer) as undefined\n        }\n        if (startWith && startWith.charAt(0) === '/') {\n          history.replaceState(null, '', startWith)\n        }\n        let once = false\n        const currentTitle = document.title\n\n        timer = setInterval(() => {\n          let beforeUri = decodeURI(location.pathname).replace(EmojiRegExp, '')\n\n          if (beforeUri === to) {\n            resolve(this)\n            return this.stop()\n          }\n          const isBuilding = to.indexOf(beforeUri) > -1\n\n          // beforeUri = beforeUri.replace(\n          //   new RegExp(`${isBuilding ? buildingEmoji : backspacingEmoji}$`, 'gu'),\n          //   '',\n          // )\n\n          const stepUri = isBuilding\n            ? beforeUri.concat(to.charAt(beforeUri.length))\n            : beforeUri.slice(0, beforeUri.length - 1)\n          if (!once) {\n            navigator = to\n            if (shouldPushState) {\n              history.pushState(null, currentTitle, to)\n            }\n            once = true\n          }\n          history.replaceState(\n            null,\n            currentTitle,\n            `${stepUri}${!isBuilding ? backspacingEmoji : buildingEmoji}`,\n          )\n        }, duration)\n      })\n    },\n    stop() {\n      timer = clearInterval(timer) as undefined\n      return history.replaceState(null, '', navigator)\n    },\n    cancel() {\n      timer = clearInterval(timer) as undefined\n    },\n  }\n}\n\nexport const bindAllLink = (config?: AnimationConfig) => {\n  if (isSSR) {\n    return\n  }\n  const instance = animateUriFactory(config)\n  const $$links = Array.from(document.querySelectorAll('a'))\n  for (const $link of $$links) {\n    const destination = $link.getAttribute('href')\n\n    if (\n      destination &&\n      destination.charAt(0) === '/' &&\n      destination.charAt(1) !== '/'\n    ) {\n      $link.addEventListener('click', (e) => {\n        e.preventDefault()\n        instance?.start(destination)\n      })\n    }\n  }\n\n  return instance\n}\n"]}